/*
You are given a string s and an integer k, 
a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them, 
causing the left and the right side of the deleted substring to concatenate together.

We repeatedly make k duplicate removals on s until we no longer can.

Return the final string after all such duplicate removals have been made. 
It is guaranteed that the answer is unique.
*/


class Solution {
public:
    string removeDuplicates(string s, int k) {
        //need to remove k adjacent same letters from s
        // stack with char count tracking
        stack<pair<char,int>> st;
        // store pairs of char and their count

        for( char c : s){
            if(st.empty || st.top != c){
                st.push({c,1});
                // if stk is empty or the top element is different
            }else{
                // increase freq
                st.top().second++;
                if(st.top().second == k){
                    st.pop();
                }
            }
        }

        // rebuild res from stack entries
        string res = "";
        while(!st.empty()){
            auto [ch, cnt] = st.top();
            st.pop();
            res = string(cnt, ch) + res;
        }
        return res;
    }
};

