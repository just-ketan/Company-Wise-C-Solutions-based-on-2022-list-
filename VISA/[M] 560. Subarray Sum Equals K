/*Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,1,1], k = 2
Output: 2

Example 2:

Input: nums = [1,2,3], k = 3
Output: 2
*/

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        // will implement pfix sum + hashmap
        unordered_map<int, int> pfxcnt;
        pfxcnt = 1; // handle subarrays starting from 0

        int pfxsum = 0;
        int cnt = 0;

        for(int i:nums){
            pfxsum += i;    // add to pfx sum
            if(pfxcnt.find(pfxsum - k) != pfxcnt.end()){
                // if there exists an element with whom the pfxsum is k, then the window is possible
                cnt += pfxcnt[pfxsum - k];
            }
            pfxcnt[pfxsum]++;
        }
        return cnt;
    }
};
