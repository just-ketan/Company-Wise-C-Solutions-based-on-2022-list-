/*
Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.

In one move, you can increment n - 1 elements of the array by 1.

 

Example 1:

Input: nums = [1,2,3]
Output: 3
Explanation: Only three moves are needed (remember each move increments two elements):
[1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]
Example 2:

Input: nums = [1,1,1]
Output: 0
*/


class Solution {
public:
    int minMoves(vector<int>& nums) {
        /*in a move we can make n-1 elements increment by 1
        for three places [a,b,c]
        there feels like a maths exists
        no of steps to make all same is (c-a) + (b-a)
        do i have to sort it ?
        */
        int minn = *min_element(nums.begin(), nums.end());
        int cnt = 0;

        /* if [a,b,c,d,e] in sorted order means
        b-a + c-a + d-a + e-a total 'moves are required
        */
        // if(unordered_set<int>(nums.begin(), nums.end()).size() <= 1) return 0;

        for(int i : nums){
            cnt += i - minn;
        }
        return cnt;
    }
};
